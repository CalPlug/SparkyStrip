//RECEIVER
/***********************************************************************************
* INCLUDES
*/
#include <hal_lcd.h>
#include <hal_led.h>
#include <hal_joystick.h>
#include <hal_assert.h>
#include <hal_board.h>
#include <hal_int.h>
#include <stdio.h>
#include <math.h>
#include "hal_mcu.h"
#include "hal_button.h"
#include "hal_rf.h"
#include "util_lcd.h"
#include "basic_rf.h"
#include "adc.h"
#include "hal_defs.h"
#include "hal_uart.h"
#include "hal_timer_32k.h"

#include "hal_lcd.h"
#include "hal_led.h"
#include "hal_int.h"
#include "hal_joystick.h"
#include "hal_board.h"
#include "hal_assert.h"

/***********************************************************************************
******************************   CONSTANTS   ***************************************
***********************************************************************************/

// Application parameters
#define RF_CHANNEL                25      // 2.4 GHz RF channel

// BasicRF address definitions
#define PAN_ID                0x2007

#define TX_ID_NUMBER1             101      // "ID" bit, identifying the meter attached
#define TX_ID_NUMBER2             102                                    // Start from 101.

#define SWITCH_ADDR1          0x2520
#define SWITCH_ADDR2          0x2521
#define SWITCH_ADDR3          0x2522
#define SWITCH_ADDR4          0x2523
#define SWITCH_ADDR5          0x2524
#define SWITCH_ADDR6          0x2525
#define LIGHT_ADDR1           0xBEEA      // different Addresses                 //0xBEEF
#define LIGHT_ADDR2           0xBEEB
#define LIGHT_ADDR3           0xBEEC
#define LIGHT_ADDR4           0xBEED
#define LIGHT_ADDR5           0xBEEE
#define LIGHT_ADDR6           0xBEEF

#define APP_PAYLOAD_LENGTH        1
#define LIGHT_TOGGLE_CMD          0
#define UNIDENTIFIED              0
#define FAN                       1
#define LAPTOP                    3
#define TWO_FANS                  2
#define HP_FANS                   5

// Application states
#define IDLE                      0
#define SEND_CMD                  1

// Application role
#define NONE                      0
#define SWITCH                    1
#define LIGHT                     2
#define APP_MODES                 2

#define UART_RX_IDLE_TIME       100     // 100 ms
#define N_RETRIES                 5     // Number of transmission retries
#define ADC_BUFFER_SIZE           1
#define DELAY_TIME              200
#define INPUT_BUFFER_LENGTH     512
#define OFFSET                -5843      
#define SAMPLING_FREQUENCY     5000
#define FREQUENCY                60
#define PI                 3.141592

#define NUMBER_DEVICES            4
#define NUMBER_PARAMETERS         4
#define LOWER                     0
#define UPPER                     1

#define NUMBER_OF_METERS          2
#define METER_1                   0
#define METER_2                   1
#define OTHER                    10


// Variable: indicates what ID number the current packet sent is:
int meter_number = 0;
int meter_value[NUMBER_OF_METERS] = {0, 0};

static void UartOutout(void);
static void PrintMeterIDs(void);
static void appConfigTimer(uint16 rate);
static void appTimerISR(void);
static void appIDReceiver();
static void appWaveformReceiver();
static volatile uint8 appUartRxIdle;
static void UartOutout(void);
static void appConfigTimer(uint16 rate);
static void appTimerISR(void);
static uint8 pTxData[APP_PAYLOAD_LENGTH] ;
static uint8 pRxData[APP_PAYLOAD_LENGTH]; 
static basicRfCfg_t basicRfConfig;
static uint8 array[1] = {0};


// MAIN FUNCTION: CODE STARTS HERE!
void main(void)
{
    // Initialise board peripherals
    halBoardInit();    
    // Config basicRF
    basicRfConfig.panId = PAN_ID;
    basicRfConfig.channel = RF_CHANNEL;
    basicRfConfig.ackRequest = TRUE;
   
    halLcdWriteLine(HAL_LCD_LINE_1, "WAVEFORM REC");
    halLcdWriteLine(HAL_LCD_LINE_2, "Ready");
    // Wait for user to press S1 to enter menu
    while(1)
    {  
      appIDReceiver();
      appWaveformReceiver();
      halUartInit(HAL_UART_BAUDRATE_38400, 0);
      appConfigTimer(1000/UART_RX_IDLE_TIME); // 100 ms RX idle timeout
      UartOutout();
      PrintMeterIDs();
     
      
    }
}
/**************Definition of the functions************************************
******************************************************************************/



static void UartOutout(void)
{
  for(int i = 0; i < 20; i++)   
  {
    
  halUartWrite(pRxData, 1);
  halMcuWaitMs(100);
  }
}

static void appConfigTimer(uint16 rate)
{
    halTimer32kInit(TIMER_32K_CLK_FREQ/rate);
    halTimer32kIntConnect(&appTimerISR);
}
static void appTimerISR(void)
{
    appUartRxIdle = TRUE;
}

static void appIDReceiver()
{
 
#ifdef ASSY_EXP4618_CC2420
    halLcdClearLine(1);
    halLcdWriteSymbol(HAL_LCD_SYMBOL_RX, 1);
#endif

    // Initialize BasicRF
    basicRfConfig.myAddr = LIGHT_ADDR1;
    if(basicRfInit(&basicRfConfig)==FAILED) {
      HAL_ASSERT(FALSE);
    }
    basicRfReceiveOn();

    // Main loop
    
        while(!basicRfPacketIsReady());

        if(basicRfReceive(pRxData, APP_PAYLOAD_LENGTH, NULL)>0) {
            if(pRxData[0] == TX_ID_NUMBER1)
            { // If the Meter is meter 1
                halLedToggle(1);
                meter_number = METER_1;
            }
            else if(pRxData[0] == TX_ID_NUMBER2) // If the Meter is meter 2
            {
                halLedToggle(2);
                meter_number = METER_2;
            }
            else
                meter_number = OTHER;
        }
    
}

static void appWaveformReceiver()
{
    halLcdWriteLine(HAL_LCD_LINE_1, "WAVEFORM REC");
    halLcdWriteLine(HAL_LCD_LINE_2, "Ready");
    halLcdWriteLine(HAL_LCD_LINE_3, " ");

#ifdef ASSY_EXP4618_CC2420
    halLcdClearLine(1);
    halLcdWriteSymbol(HAL_LCD_SYMBOL_RX, 1);
#endif

    // Initialize BasicRF
    basicRfConfig.myAddr = LIGHT_ADDR1;
    if(basicRfInit(&basicRfConfig)==FAILED) {
      HAL_ASSERT(FALSE);
    }
    basicRfReceiveOn();

    // Main loop
    
        while(!basicRfPacketIsReady());

        if(basicRfReceive(pRxData, APP_PAYLOAD_LENGTH, NULL)>0) {
            if(pRxData[0] == UNIDENTIFIED) 
            {
                if(meter_number == METER_1 || meter_number == METER_2)
                  meter_value[meter_number] = UNIDENTIFIED;
            }
	    if(pRxData[0] == FAN) 
            {
                if(meter_number == METER_1 || meter_number == METER_2)
                  meter_value[meter_number] = FAN;
            }
            if(pRxData[0] == LAPTOP) 
            {
                if(meter_number == METER_1 || meter_number == METER_2)
                  meter_value[meter_number] = LAPTOP;
            }
            if(pRxData[0] == TWO_FANS) 
            {
                if(meter_number == METER_1 || meter_number == METER_2)
                  meter_value[meter_number] = TWO_FANS;
            }
            if(pRxData[0] == HP_FANS) 
            {
                if(meter_number == METER_1 || meter_number == METER_2)
                  meter_value[meter_number] = HP_FANS;
            }
        }
//        array[0] = pRxData[0];
    
    
}

static void PrintMeterIDs()
{
  if(meter_value[METER_1] == UNIDENTIFIED)
  {  
    if(meter_value[METER_2] == UNIDENTIFIED)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Unknown");
    else if(meter_value[METER_2] == FAN)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan");
    else if(meter_value[METER_2] == LAPTOP)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  HP Laptop");
    else if(meter_value[METER_2] == TWO_FANS)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan x 2");
    else if(meter_value[METER_2] == HP_FANS)  
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "HP Laptop + Fan");
  }
  else if(meter_value[METER_1] == FAN)
  {
    if(meter_value[METER_2] == UNIDENTIFIED)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Unknown");
    else if(meter_value[METER_2] == FAN)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan");
    else if(meter_value[METER_2] == LAPTOP)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  HP Laptop");
    else if(meter_value[METER_2] == TWO_FANS)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan x 2");
    else if(meter_value[METER_2] == HP_FANS)  
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "HP Laptop + Fan");
  }
  else if(meter_value[METER_1] == LAPTOP)
  {
    if(meter_value[METER_2] == UNIDENTIFIED)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Unknown");
    else if(meter_value[METER_2] == FAN)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan");
    else if(meter_value[METER_2] == LAPTOP)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  HP Laptop");
    else if(meter_value[METER_2] == TWO_FANS)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan x 2");
    else if(meter_value[METER_2] == HP_FANS)  
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "HP Laptop + Fan");
  } 
  else if(meter_value[METER_1] == TWO_FANS)
  {
    if(meter_value[METER_2] == UNIDENTIFIED)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Unknown");
    else if(meter_value[METER_2] == FAN)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan");
    else if(meter_value[METER_2] == LAPTOP)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  HP Laptop");
    else if(meter_value[METER_2] == TWO_FANS)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan x 2");
    else if(meter_value[METER_2] == HP_FANS)  
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "HP Laptop + Fan");
  }
  else if(meter_value[METER_1] == HP_FANS)  
  {
    if(meter_value[METER_2] == UNIDENTIFIED)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Unknown");
    else if(meter_value[METER_2] == FAN)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan");
    else if(meter_value[METER_2] == LAPTOP)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  HP Laptop");
    else if(meter_value[METER_2] == TWO_FANS)
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "  Fan x 2");
    else if(meter_value[METER_2] == HP_FANS)  
      halLcdWriteLines("  Meter #2: ", "Detected Device:", "HP Laptop + Fan");
  }
}
